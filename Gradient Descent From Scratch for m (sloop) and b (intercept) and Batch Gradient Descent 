{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPrqQLrk3b2L3NEpS7DUz5l",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/RohitVerma0021/30Days-Machine-Learning-coding-chalange/blob/main/Gradient%20Descent%20From%20Scratch%20for%20m%20(sloop)%20and%20b%20(intercept)%20and%20Batch%20Gradient%20Descent%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qRjyz2vDSrnV"
      },
      "outputs": [],
      "source": [
        "from sklearn.linear_model import LinearRegression"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.datasets import make_regression"
      ],
      "metadata": {
        "id": "MkNUcBgdTusY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x,y = make_regression(n_samples=4, n_features=1, n_informative=1, n_targets=1,noise=80,random_state=13)"
      ],
      "metadata": {
        "id": "b8SbcpW9T91z"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.scatter(x,y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "9upygWycT_MG",
        "outputId": "b302b25b-ff17-4292-a67d-11b17a3b9549"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x7ccc7281d510>"
            ]
          },
          "metadata": {},
          "execution_count": 4
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "reg = LinearRegression()\n",
        "reg.fit(x,y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "gkNROkIBUEAE",
        "outputId": "149428f7-f36f-4167-bbc3-6f59f678dbbb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-1 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-1 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-1 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-1 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-1 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>LinearRegression</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.linear_model.LinearRegression.html\">?<span>Documentation for LinearRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>LinearRegression()</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "m = reg.coef_\n",
        "b = reg.intercept_"
      ],
      "metadata": {
        "id": "6s135AwcUH8Z"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.scatter(x,y)\n",
        "plt.plot(x,reg.predict(x),c='r')\n",
        "plt.plot()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "mTRU-WTBUPLM",
        "outputId": "7d9c3752-6308-4c0f-b417-e1bdc292fe29"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[]"
            ]
          },
          "metadata": {},
          "execution_count": 7
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "m"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MUKSf5ZXVRmL",
        "outputId": "e51dfc08-e176-4263-d227-fd85d116f9f3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([78.35063668])"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "b"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PJRDYcUNV99X",
        "outputId": "cd730e0e-8069-4823-c40c-fa47f4645d43"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "np.float64(26.15963284313262)"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = (m*x + 100).reshape(4)\n",
        "y_pred"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VW_Xz76oV-Yn",
        "outputId": "5ce641a1-a2f7-477a-a3b5-9732e7ade628"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 44.18373806, 135.3997844 ,  96.51315548, 159.05807568])"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.scatter(x,y)\n",
        "plt.plot(x,reg.predict(x),c='r',label= 'OLS')\n",
        "plt.plot(x,y_pred,c='#00a65a',label='b = 100')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "id": "Ssfm8TyfWy4v",
        "outputId": "54c8d75b-ad3d-4678-ca4e-c21032267e3f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np"
      ],
      "metadata": {
        "id": "2QggoDDiYoz0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "m = 78.35\n",
        "b = 100\n",
        "loss_slop = -2 * np.sum(y - m*x.ravel() - 100)\n",
        "loss_slop"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "z1T7-OR6ZU7i",
        "outputId": "b530a0b1-5ddf-4585-ec37-e41868e5aa3a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "np.float64(590.7223659179078)"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#choose the learning rate = 0.1\n",
        "lr = 0.1\n",
        "step_size = loss_slop*lr\n",
        "b = b - step_size\n",
        "\n",
        "print(step_size)\n",
        "print(b)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "s0WnBFZdZbs3",
        "outputId": "94babc9b-ff14-4e7c-9ab3-7d2d38d0d732"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "59.072236591790784\n",
            "40.927763408209216\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.scatter(x,y)\n",
        "plt.plot(x,reg.predict(x),c='r',label= 'OLS')\n",
        "plt.plot(x,y_pred,c='#00a65a',label='b = 100')\n",
        "plt.plot(x,(m*x + b).reshape(4),c='#4000ff',label='b = {}'.format(b))\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "id": "nux8mjfnai7M",
        "outputId": "77ee3152-c1bc-411b-e694-e50a71ef6ff1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred1 = m*x+b"
      ],
      "metadata": {
        "id": "2nWsu6FEdJ3Z"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "loos_slop = -2*np.sum(y - m*x.ravel() - b)\n",
        "print(loos_slop)\n",
        "step_size = loos_slop*lr\n",
        "b = b - step_size\n",
        "print(step_size)\n",
        "print(b)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LLRaO5otbJeM",
        "outputId": "d36de58b-cc07-49b8-f24a-42d50ee7f652"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "4.725778927343242\n",
            "0.47257789273432427\n",
            "26.2778487334451\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred2 = (m*x.ravel()) + b"
      ],
      "metadata": {
        "id": "nK1RdzjLdWhj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VTfVbSMWdkfb",
        "outputId": "df507001-d6d3-4269-e139-8c442b136a9a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([-29.53795964,  61.67734547,  22.79103255,  85.3354445 ])"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.scatter(x,y)\n",
        "plt.plot(x,reg.predict(x),c='r',label= 'OLS')\n",
        "plt.plot(x,y_pred2,color='#00a65a',label='b = {}'.format(b))\n",
        "plt.plot(x,y_pred1,color='#A3E4D7',label='b = {}'.format(b))\n",
        "plt.plot(x,y_pred,color='#A3E4D7',label='b = 100')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "id": "NwVQWgivcfLv",
        "outputId": "e4dda8fe-d45a-4195-ecaa-dea1351661af"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "loss_slop = -2*np.sum(y - m*x.ravel() - b)\n",
        "print(loss_slop)\n",
        "step_size = loss_slop*lr\n",
        "b = b - step_size\n",
        "print(step_size)\n",
        "print(b)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GGT1ZBEVch9g",
        "outputId": "e2e11b03-59a3-4462-ca98-9411d36a3423"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.9451557854686428\n",
            "0.09451557854686428\n",
            "26.183333154898236\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred3 = (m*x.ravel()) + b\n",
        "plt.scatter(x,y)\n",
        "plt.plot(x,reg.predict(x),c='r',label= 'OLS')\n",
        "plt.plot(x,y_pred3,color='orange',label='b = {}'.format(b))\n",
        "plt.plot(x,y_pred2,color='#A3E4D7',label='b = {}'.format(b))\n",
        "plt.plot(x,y_pred1,color='#A3E4D7',label='b = {}'.format(b))\n",
        "plt.legend()\n",
        "plt.plot()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "HRtQZxeRcqRU",
        "outputId": "0f91690b-95e8-4434-d9ee-1e122adae4c8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[]"
            ]
          },
          "metadata": {},
          "execution_count": 36
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "b = -450\n",
        "m = 78.35\n",
        "lr = 0.1\n",
        "\n",
        "epochs = 50\n",
        "for i in range(epochs):\n",
        "  slop = -2*np.sum(y - (m*x.ravel()) - b)\n",
        "  b = b - (lr*slop)\n",
        "  y_pred = (m*x.ravel()) + b\n",
        "  plt.plot(x,y_pred)\n",
        "\n",
        "plt.scatter(x,y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "Yp5dvgu6eWqZ",
        "outputId": "24679bab-b8ee-4dac-fd07-709018250bd6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x7ccc68e616d0>"
            ]
          },
          "metadata": {},
          "execution_count": 40
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.datasets import make_regression"
      ],
      "metadata": {
        "id": "qV_UOPsjhc-6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LinearRegression"
      ],
      "metadata": {
        "id": "lMmVUmTNCshh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np"
      ],
      "metadata": {
        "id": "2oUl8HDgCxhQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.scatter(x,y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "PKCmKCXxC-AE",
        "outputId": "eaa50a4c-03c0-4334-b772-e5e40c7bc387"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x7d1b60280390>"
            ]
          },
          "metadata": {},
          "execution_count": 7
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.scatter(x.ravel(),y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "RSkTTNR5C_oE",
        "outputId": "0fa5f37b-137e-4a9f-a3eb-94bed04da184"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x7d1b605b8390>"
            ]
          },
          "metadata": {},
          "execution_count": 8
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "reg = LinearRegression()"
      ],
      "metadata": {
        "id": "PpTH0zELDIKP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "reg.fit(x,y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "IuJdgFEaFtkl",
        "outputId": "e61f3902-4c2b-4174-814c-325899815544"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-1 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-1 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-1 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-1 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-1 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>LinearRegression</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.linear_model.LinearRegression.html\">?<span>Documentation for LinearRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>LinearRegression()</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "reg.coef_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BqWYp8mHFvWC",
        "outputId": "44f201f7-93ab-45cf-a54f-fec53064a746"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([78.35063668])"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "m = 78.35\n",
        "b = 500"
      ],
      "metadata": {
        "id": "AJYWoAIuFxa_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "lr = 0.1\n",
        "epochs = 100\n",
        "for i in range(epochs):\n",
        "  slop = -2*np.sum(y - (m*x.ravel())-b)\n",
        "  b = b - (lr*slop)\n",
        "  y_pred = (m*x.ravel()) + b\n",
        "\n",
        "  plt.plot(x,y_pred)\n",
        "\n",
        "plt.scatter(x,y)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "3qUNiODGF7L6",
        "outputId": "aa9ace1e-7dbd-4e7e-e058-c06b4ddcf905"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x7d1b5754dc10>"
            ]
          },
          "metadata": {},
          "execution_count": 23
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "b = -450\n",
        "m = 78.35\n",
        "lr = 0.1\n",
        "\n",
        "epochs = 50\n",
        "for i in range(epochs):\n",
        "  slop = -2*np.sum(y - (m*x.ravel()) - b)\n",
        "  b = b - (lr*slop)\n",
        "  y_pred = (m*x.ravel()) + b\n",
        "  plt.plot(x,y_pred)\n",
        "\n",
        "plt.scatter(x,y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "8cu73QqQHMKu",
        "outputId": "8a6ce4e5-32ac-4616-b578-fbd988961a9a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x7d1b57a58150>"
            ]
          },
          "metadata": {},
          "execution_count": 17
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x,y = make_regression(n_samples=100, n_features=1, n_informative=1, n_targets=1,noise=20,random_state=13)"
      ],
      "metadata": {
        "id": "PBnyUDxRHskw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.scatter(x,y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "AhDx9KtxMPOj",
        "outputId": "c18442df-cc91-4e39-ffca-13c8dcfde5ae"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x7d1b578b8dd0>"
            ]
          },
          "metadata": {},
          "execution_count": 58
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split"
      ],
      "metadata": {
        "id": "f0h2T1eUMQ-b"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "re = LinearRegression()"
      ],
      "metadata": {
        "id": "I1GM0IdfMhPO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "re.fit(x,y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "KyFT7z4-Mne9",
        "outputId": "7ffb07d8-9ad6-4092-f82c-08a0a12fb1cf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ],
            "text/html": [
              "<style>#sk-container-id-3 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-3 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-3 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-3 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-3 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-3 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-3 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-3 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-3 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-3 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-3 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>LinearRegression</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.linear_model.LinearRegression.html\">?<span>Documentation for LinearRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>LinearRegression()</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "re.coef_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eNJPEdnpMqNq",
        "outputId": "7d43abb7-7df8-446f-800a-0cfb59bf0fe9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([27.82809103])"
            ]
          },
          "metadata": {},
          "execution_count": 61
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "m = 27.82"
      ],
      "metadata": {
        "id": "4K-_wSFeMsJ6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "re.intercept_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UTuuyJGYMwR6",
        "outputId": "9f349a75-5040-4fe5-8310-1d442526adc3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "np.float64(-2.29474455867698)"
            ]
          },
          "metadata": {},
          "execution_count": 63
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = re.predict(x)"
      ],
      "metadata": {
        "id": "XdOAzORmMz9a"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import r2_score"
      ],
      "metadata": {
        "id": "32OmJ-BPNN-B"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "r2_score(y,y_pred)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eHoeuj0tNUc2",
        "outputId": "a6d55b50-e629-4f42-daf3-f4618ed321fe"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.7035182396294911"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class GDR:\n",
        "  def __init__(self,learning_rate,epochs):\n",
        "    self.m = 27.82\n",
        "    self.b = -120\n",
        "    self.lr = learning_rate\n",
        "    self.epochs = epochs\n",
        "\n",
        "  def fit(self,x_train,y_train):\n",
        "    for i in range(self.epochs):\n",
        "      loss_slop = -2*np.sum(y_train - self.m*x_train.ravel() - self.b)\n",
        "      self.b = self.b - (self.lr*loss_slop)\n",
        "    print(self.b)\n",
        "\n",
        "  def predict(self,x):\n",
        "    return self.m*x + self.b\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "kLozhuuLNaCQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "g = GDR(0.2,100)"
      ],
      "metadata": {
        "id": "9DUJ4DadSNEY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "g.fit(x,y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XVnzayHvSReK",
        "outputId": "f7f32dbc-69a6-4166-db45-d96cc2ebfce0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-1.5040362389044932e+161\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class GDRegressor:\n",
        "\n",
        "    def __init__(self,learning_rate,epochs):\n",
        "        self.m = 27.82\n",
        "        self.b = -120\n",
        "        self.lr = learning_rate\n",
        "        self.epochs = epochs\n",
        "\n",
        "    def fit(self,X,y):\n",
        "        # calcualte the b using GD\n",
        "        for i in range(self.epochs):\n",
        "            loss_slope_b = -2 * np.sum(y - self.m*X.ravel() - self.b)\n",
        "\n",
        "\n",
        "            self.b = self.b - (self.lr * loss_slope_b)\n",
        "\n",
        "        print(self.b)\n",
        "\n",
        "    def predict(self,X):\n",
        "        return self.m * X + self.b"
      ],
      "metadata": {
        "id": "kMDf4CeESTSr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "gd = GDRegressor(0.001,50)"
      ],
      "metadata": {
        "id": "rKFXNcNcUz_G"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "gd.fit(x,y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sMDSu9usU1yp",
        "outputId": "470a8d6e-9347-42b0-9bd9-436c96c145dc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-2.295951934863106\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n"
      ],
      "metadata": {
        "id": "vD0Yp5rRWhne"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class GDRegressor:\n",
        "  def __init__(self,learning_rate,epochs):\n",
        "    self.m = 29.19\n",
        "    self.b = 0\n",
        "    self.lr = learning_rate\n",
        "    self.epochs = epochs\n",
        "\n",
        "  def fit(self,x,y):\n",
        "    for i in range(self.epochs):\n",
        "      loss_sloop_b =  -2*np.sum(y - self.m*x.ravel() - self.b)\n",
        "      self.b = self.b - (self.lr*loss_sloop_b)\n",
        "    print(self.b)\n"
      ],
      "metadata": {
        "id": "KOidLQoCU3p1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "g = GDRegressor(0.001,500)"
      ],
      "metadata": {
        "id": "Tf8jjXL9XZiA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "g.fit(x,y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mLd4p90HXchY",
        "outputId": "ee9e3774-152b-46c3-d2f8-89450c9a30a8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-2.3742901084470156\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Batch Gradient Descent**"
      ],
      "metadata": {
        "id": "BbkJVDzI4l4Q"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.datasets import load_diabetes\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import r2_score\n",
        "from sklearn.model_selection import train_test_split"
      ],
      "metadata": {
        "id": "ITWBaSozXi4H"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "load_diabetes"
      ],
      "metadata": {
        "id": "Sifr_JHkXnWI",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 586
        },
        "outputId": "a0aeb1de-36f3-4ff7-f26d-a4c2ae785755"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<function sklearn.datasets._base.load_diabetes(*, return_X_y=False, as_frame=False, scaled=True)>"
            ],
            "text/html": [
              "<div style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"><style>\n",
              "      pre.function-repr-contents {\n",
              "        overflow-x: auto;\n",
              "        padding: 8px 12px;\n",
              "        max-height: 500px;\n",
              "      }\n",
              "\n",
              "      pre.function-repr-contents.function-repr-contents-collapsed {\n",
              "        cursor: pointer;\n",
              "        max-height: 100px;\n",
              "      }\n",
              "    </style>\n",
              "    <pre style=\"white-space: initial; background:\n",
              "         var(--colab-secondary-surface-color); padding: 8px 12px;\n",
              "         border-bottom: 1px solid var(--colab-border-color);\"><b>sklearn.datasets._base.load_diabetes</b><br/>def load_diabetes(*, return_X_y=False, as_frame=False, scaled=True)</pre><pre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"><a class=\"filepath\" style=\"display:none\" href=\"#\">/usr/local/lib/python3.11/dist-packages/sklearn/datasets/_base.py</a>Load and return the diabetes dataset (regression).\n",
              "\n",
              "==============   ==================\n",
              "Samples total    442\n",
              "Dimensionality   10\n",
              "Features         real, -.2 &lt; x &lt; .2\n",
              "Targets          integer 25 - 346\n",
              "==============   ==================\n",
              "\n",
              ".. note::\n",
              "   The meaning of each feature (i.e. `feature_names`) might be unclear\n",
              "   (especially for `ltg`) as the documentation of the original dataset is\n",
              "   not explicit. We provide information that seems correct in regard with\n",
              "   the scientific literature in this field of research.\n",
              "\n",
              "Read more in the :ref:`User Guide &lt;diabetes_dataset&gt;`.\n",
              "\n",
              "Parameters\n",
              "----------\n",
              "return_X_y : bool, default=False\n",
              "    If True, returns ``(data, target)`` instead of a Bunch object.\n",
              "    See below for more information about the `data` and `target` object.\n",
              "\n",
              "    .. versionadded:: 0.18\n",
              "\n",
              "as_frame : bool, default=False\n",
              "    If True, the data is a pandas DataFrame including columns with\n",
              "    appropriate dtypes (numeric). The target is\n",
              "    a pandas DataFrame or Series depending on the number of target columns.\n",
              "    If `return_X_y` is True, then (`data`, `target`) will be pandas\n",
              "    DataFrames or Series as described below.\n",
              "\n",
              "    .. versionadded:: 0.23\n",
              "\n",
              "scaled : bool, default=True\n",
              "    If True, the feature variables are mean centered and scaled by the\n",
              "    standard deviation times the square root of `n_samples`.\n",
              "    If False, raw data is returned for the feature variables.\n",
              "\n",
              "    .. versionadded:: 1.1\n",
              "\n",
              "Returns\n",
              "-------\n",
              "data : :class:`~sklearn.utils.Bunch`\n",
              "    Dictionary-like object, with the following attributes.\n",
              "\n",
              "    data : {ndarray, dataframe} of shape (442, 10)\n",
              "        The data matrix. If `as_frame=True`, `data` will be a pandas\n",
              "        DataFrame.\n",
              "    target: {ndarray, Series} of shape (442,)\n",
              "        The regression target. If `as_frame=True`, `target` will be\n",
              "        a pandas Series.\n",
              "    feature_names: list\n",
              "        The names of the dataset columns.\n",
              "    frame: DataFrame of shape (442, 11)\n",
              "        Only present when `as_frame=True`. DataFrame with `data` and\n",
              "        `target`.\n",
              "\n",
              "        .. versionadded:: 0.23\n",
              "    DESCR: str\n",
              "        The full description of the dataset.\n",
              "    data_filename: str\n",
              "        The path to the location of the data.\n",
              "    target_filename: str\n",
              "        The path to the location of the target.\n",
              "\n",
              "(data, target) : tuple if ``return_X_y`` is True\n",
              "    Returns a tuple of two ndarray of shape (n_samples, n_features)\n",
              "    A 2D array with each row representing one sample and each column\n",
              "    representing the features and/or target of a given sample.\n",
              "\n",
              "    .. versionadded:: 0.18\n",
              "\n",
              "Examples\n",
              "--------\n",
              "&gt;&gt;&gt; from sklearn.datasets import load_diabetes\n",
              "&gt;&gt;&gt; diabetes = load_diabetes()\n",
              "&gt;&gt;&gt; diabetes.target[:3]\n",
              "array([151.,  75., 141.])\n",
              "&gt;&gt;&gt; diabetes.data.shape\n",
              "(442, 10)</pre>\n",
              "      <script>\n",
              "      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {\n",
              "        for (const element of document.querySelectorAll('.filepath')) {\n",
              "          element.style.display = 'block'\n",
              "          element.onclick = (event) => {\n",
              "            event.preventDefault();\n",
              "            event.stopPropagation();\n",
              "            google.colab.files.view(element.textContent, 1043);\n",
              "          };\n",
              "        }\n",
              "      }\n",
              "      for (const element of document.querySelectorAll('.function-repr-contents')) {\n",
              "        element.onclick = (event) => {\n",
              "          event.preventDefault();\n",
              "          event.stopPropagation();\n",
              "          element.classList.toggle('function-repr-contents-collapsed');\n",
              "        };\n",
              "      }\n",
              "      </script>\n",
              "      </div>"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# @title Default title text\n",
        "x,y = load_diabetes(return_X_y=True)"
      ],
      "metadata": {
        "id": "d3QRuO5oX1l_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n"
      ],
      "metadata": {
        "id": "m42aWembmhxx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=42)"
      ],
      "metadata": {
        "id": "5yivBn1-miKl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "lr= LinearRegression()"
      ],
      "metadata": {
        "id": "lLQ55SOnnOg4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "lr.fit(x_train,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "35Q31EbQnQUy",
        "outputId": "794f753b-829b-4715-883b-f3400c57e3a0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-1 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-1 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-1 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-1 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-1 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>LinearRegression</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.linear_model.LinearRegression.html\">?<span>Documentation for LinearRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>LinearRegression()</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(lr.coef_)\n",
        "print(lr.intercept_)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RfQKsEnInYrG",
        "outputId": "50364209-e35c-4ede-ea75-850454226430"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[  37.90402135 -241.96436231  542.42875852  347.70384391 -931.48884588\n",
            "  518.06227698  163.41998299  275.31790158  736.1988589    48.67065743]\n",
            "151.34560453985995\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = lr.predict(x_test)"
      ],
      "metadata": {
        "id": "CORTgDRkn9ia"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "r2_score(y_test,y_pred)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Zr2ITgUyoDdJ",
        "outputId": "8b91b934-34fc-44e3-fdf3-420413d2a3b4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.4526027629719195"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_train.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W0oAszWnoJyE",
        "outputId": "58317933-c69f-4888-e34f-896450fb9331"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(353, 10)"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Ir0h8-FcpSGA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "nW7neg4dpT50"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}